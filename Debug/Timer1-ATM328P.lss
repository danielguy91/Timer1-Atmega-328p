
Timer1-ATM328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f5  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000165d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initTimers10ms>:
volatile  uint16_t timeOut1ms;

//------------------------------------------------------

void  initTimers10ms () {
	OCR1A =625 ;                            // Valor de compracion para 10 ms
  90:	81 e7       	ldi	r24, 0x71	; 113
  92:	92 e0       	ldi	r25, 0x02	; 2
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0x00 ;                          // temporizador inicializo
  9c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 = ( 1 << OCIE1A);                // interrupción de compracion en modo CTC OCR1A = TCNT1
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = ( 1 << WGM12) | ( 1 << CS12) ; // PRESCALAR EN 256 y MODO CTC
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  b0:	08 95       	ret

000000b2 <initPortimer>:
}



void initPortimer(){
   DDRB |= (1<<DDB5);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	84 b9       	out	0x04, r24	; 4
   PORTB |= (1<<PORTB5);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <main>:
	
}	


int main(void) {
    initPortimer();
  c0:	0e 94 59 00 	call	0xb2	; 0xb2 <initPortimer>
	sei();                     //Activa interrupciones en el micro
  c4:	78 94       	sei
    initTimers10ms ();
  c6:	0e 94 48 00 	call	0x90	; 0x90 <initTimers10ms>
	timeOut1ms=timeEjecucion ;            // configuro en 250 ms
  ca:	89 e1       	ldi	r24, 0x19	; 25
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x16>

000000d8 <__vector_11>:
	
	}

}

ISR (TIMER1_COMPA_vect) {                           // Interrupcion del timer1
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	timeOut1ms--;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (! timeOut1ms) {
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	89 2b       	or	r24, r25
 102:	79 f4       	brne	.+30     	; 0x122 <__vector_11+0x4a>
		timeOut1ms = timeEjecucion ;
 104:	89 e1       	ldi	r24, 0x19	; 25
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		// (1 << PORTB5 1) desplazado por B5 es igual a 00100000
		if (PORTB & ( 1 << PORTB5)){ // desplazo al numero 1 cinco veces para que aparezca en la posicion 5
 110:	2d 9b       	sbis	0x05, 5	; 5
 112:	04 c0       	rjmp	.+8      	; 0x11c <__vector_11+0x44>
		PORTB &= ~( 1 << PORTB5);} // ~ (1 << PORTB5) = 11011111 hago cero el bit 5 de PORTB5
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	85 b9       	out	0x05, r24	; 5
 11a:	03 c0       	rjmp	.+6      	; 0x122 <__vector_11+0x4a>
		else{
		PORTB |= ( 1 << PORTB5);}
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	85 b9       	out	0x05, r24	; 5
	}
	 //PORTB ^= (1<<5);
	
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
